/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
import java.io.*;
import java.util.HashMap;
import java.util.Map;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;

/** Token Manager. */
@SuppressWarnings ("unused")
public class ParserTokenManager implements ParserConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000000000L) != 0L)
            return 49;
         if ((active0 & 0xffe0000000000000L) != 0L || (active1 & 0xffffe7fffffffff9L) != 0L || (active2 & 0xffffffffffe1fL) != 0L)
         {
            jjmatchedKind = 180;
            return 15;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 50;
         if ((active1 & 0x180000000006L) != 0L || (active2 & 0x1e0L) != 0L)
         {
            jjmatchedKind = 180;
            return 17;
         }
         if ((active0 & 0x1800000030000L) != 0L)
            return 46;
         if ((active0 & 0x4000000080000L) != 0L)
            return 0;
         if ((active0 & 0x1000000000L) != 0L)
            return 29;
         if ((active0 & 0x200000000L) != 0L)
            return 51;
         if ((active0 & 0x8000L) != 0L)
            return 52;
         if ((active0 & 0x8000008000000L) != 0L)
            return 6;
         if ((active0 & 0x4000000000L) != 0L)
            return 53;
         return -1;
      case 1:
         if ((active0 & 0x7ee0000000000000L) != 0L || (active1 & 0xf7fa7eff7ffaf0beL) != 0L || (active2 & 0xffffffffe7fffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 180;
               jjmatchedPos = 1;
            }
            return 15;
         }
         if ((active0 & 0x8100000000000000L) != 0L || (active1 & 0x805810080050f41L) != 0L || (active2 & 0x18000L) != 0L)
            return 15;
         return -1;
      case 2:
         if ((active0 & 0x3ea0000000000000L) != 0L || (active1 & 0xfef2fe6f63fa8eabL) != 0L || (active2 & 0xefffffffff1ffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 180;
               jjmatchedPos = 2;
            }
            return 15;
         }
         if ((active0 & 0x4140000000000000L) != 0L || (active1 & 0x10800901c007014L) != 0L || (active2 & 0x1000000000e00L) != 0L)
            return 15;
         return -1;
      case 3:
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x4b4200000aL) != 0L || (active2 & 0x800300002L) != 0L)
            return 15;
         if ((active0 & 0x3aa0000000000000L) != 0L || (active1 & 0xfef2fe2421fa8ea1L) != 0L || (active2 & 0xffff7ffcffdfdL) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 3;
            return 15;
         }
         return -1;
      case 4:
         if ((active0 & 0x2020000000000000L) != 0L || (active1 & 0x9ad2fc0021fa8ea1L) != 0L || (active2 & 0x7fff7ffcb79fdL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 180;
               jjmatchedPos = 4;
            }
            return 15;
         }
         if ((active0 & 0x1a80000000000000L) != 0L || (active1 & 0x6420022400000000L) != 0L || (active2 & 0x8000000048400L) != 0L)
            return 15;
         return -1;
      case 5:
         if ((active0 & 0x3020000000000000L) != 0L || (active1 & 0x9ad2e40000b20aa0L) != 0L || (active2 & 0x3cbd5dfcb597dL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 180;
               jjmatchedPos = 5;
            }
            return 15;
         }
         if ((active1 & 0x180021488401L) != 0L || (active2 & 0x4342220002080L) != 0L)
            return 15;
         return -1;
      case 6:
         if ((active0 & 0x3020000000000000L) != 0L || (active1 & 0x9ad0a40000920aa0L) != 0L || (active2 & 0xc3d55fc14168L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 6;
            return 15;
         }
         if ((active1 & 0x2500000200000L) != 0L || (active2 & 0x30800800a1815L) != 0L)
            return 15;
         return -1;
      case 7:
         if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x18c0a40000900a80L) != 0L || (active2 & 0xc38507414068L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 7;
            return 15;
         }
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0x8210000000020020L) != 0L || (active2 & 0x5058800100L) != 0L)
            return 15;
         return -1;
      case 8:
         if ((active0 & 0x3000000000000000L) != 0L || (active1 & 0x40a40000800080L) != 0L || (active2 & 0x828003004068L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 8;
            return 15;
         }
         if ((active1 & 0x1880000000100a00L) != 0L || (active2 & 0x410504410000L) != 0L)
            return 15;
         return -1;
      case 9:
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x40a40000800080L) != 0L || (active2 & 0x808001000040L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 9;
            return 15;
         }
         if ((active0 & 0x2000000000000000L) != 0L || (active2 & 0x20002004028L) != 0L)
            return 15;
         return -1;
      case 10:
         if ((active1 & 0x40a40000000080L) != 0L || (active2 & 0x808001000040L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 10;
            return 15;
         }
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x800000L) != 0L)
            return 15;
         return -1;
      case 11:
         if ((active1 & 0x40840000000080L) != 0L || (active2 & 0x808000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 11;
            return 15;
         }
         if ((active1 & 0x200000000000L) != 0L || (active2 & 0x1000040L) != 0L)
            return 15;
         return -1;
      case 12:
         if ((active1 & 0x40800000000080L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 12;
            return 15;
         }
         if ((active1 & 0x40000000000L) != 0L || (active2 & 0x808000000000L) != 0L)
            return 15;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x0L);
      case 35:
         return jjStartNfaWithStates_0(0, 36, 29);
      case 36:
         return jjStartNfaWithStates_0(0, 35, 50);
      case 37:
         return jjStartNfaWithStates_0(0, 38, 53);
      case 38:
         return jjStartNfaWithStates_0(0, 37, 49);
      case 39:
         return jjStartNfaWithStates_0(0, 15, 52);
      case 40:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L, 0x0L);
      case 41:
         return jjStopAtPos(0, 28);
      case 42:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x2020000000000L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L, 0x0L);
      case 44:
         return jjStopAtPos(0, 26);
      case 45:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L, 0x0L);
      case 46:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L, 0x0L);
      case 47:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 30);
      case 60:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x148000000000L, 0x0L, 0x0L);
      case 61:
         return jjStopAtPos(0, 20);
      case 62:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0x290000000000L, 0x0L, 0x0L);
      case 64:
         return jjStopAtPos(0, 32);
      case 91:
         return jjStopAtPos(0, 23);
      case 93:
         return jjStopAtPos(0, 24);
      case 94:
         return jjStopAtPos(0, 31);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1e0000000000000L, 0xe00010000000000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x3000000000000000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1c00000000000000L, 0xc000020000000000L, 0x3L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x40000000001L, 0x1cL);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180000000006L, 0x1e0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600000000038L, 0xe00L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000000fc0L, 0x3c000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000L, 0x40000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L, 0x80000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000L, 0x1f00000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000078000L, 0x1e000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000380000L, 0x7e0000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60000001c00000L, 0x3800000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e000000L, 0x3fc000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800001c0000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe00000000L, 0xc00000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L, 0x3000000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000000L, 0xc000000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L, 0x0L);
      case 123:
         return jjStartNfaWithStates_0(0, 33, 51);
      case 125:
         return jjStopAtPos(0, 34);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 41:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 42:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 46:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         break;
      case 60:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      case 61:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 62:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x20001000080000L, active2, 0x100c020100600L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0x200000000008000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2200000000000000L, active1, 0x40000007c00000L, active2, 0x380028300cL);
      case 70:
      case 102:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 70, 15);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 80, 15);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80006058000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x1002640000002008L, active2, 0x6000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400020000000002L, active2, 0x42000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L, active2, 0x4000L);
      case 78:
      case 110:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 114, 15);
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0x800600000e04L, active2, 0xc00000018020L);
      case 79:
      case 111:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 95, 15);
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000000L, active1, 0x8000008000005011L, active2, 0x10001c60800L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L, active2, 0x20000000001L);
      case 82:
      case 114:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 82, 15);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0x2110000000300000L, active2, 0x8000180000000L);
      case 83:
      case 115:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 112, 15);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0x800000800000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L, active2, 0x3c0004000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000020L, active2, 0x600000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x18000002L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x180000000000L, active2, 0x1c0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L, active2, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000L, active2, 0x440840200002L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000L, active2, 0x600000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000480000L, active2, 0x60000L);
      case 68:
      case 100:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 15);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 15);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 15);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80002408000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6000000840020000L, active2, 0x20018000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x14000000004L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L, active2, 0x1000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L, active2, 0x4000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x420806200800000L, active2, 0x8800080000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 15);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 91, 15);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000408L, active2, 0x2000L);
      case 77:
      case 109:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 15);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000000000L, active1, 0x8000600000000020L, active2, 0x4000000001010L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000300000L, active2, 0x100100000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100101000080L, active2, 0x40c9L);
      case 82:
      case 114:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 92, 15);
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 103, 15);
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x80000020000000L, active2, 0x3200000800c00L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2420000000000000L, active1, 0xa40040000000002L, active2, 0x2021080000L);
      case 84:
      case 116:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 78, 15);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 90, 15);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 115, 15);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000400000800L, active2, 0x10100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 86:
      case 118:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 15);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 120, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x2400600000000000L, active2, 0x5000000040014L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000100020L, active2, 0xa0020000000L);
      case 68:
      case 100:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 163, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 69:
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 15);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 15);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 15);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 96, 15);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 148, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x880080001008a00L, active2, 0xc004c19140L);
      case 70:
      case 102:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0x420000400L, active2, 0x201000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000080L, active2, 0x400600004000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x800000000020L);
      case 78:
      case 110:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 94, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800001L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x40100000400000L, active2, 0x80L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1010040000000000L, active2, 0x2000L);
      case 82:
      case 114:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 129, 15);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 149, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000020000L, active2, 0x100018000008L);
      case 83:
      case 115:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000000L, active1, 0x20020000000000L, active2, 0x80000L);
      case 84:
      case 116:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 15);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x8200800000000000L, active2, 0xa050141000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 54:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 138, 15);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1082000001020000L, active2, 0x800a1080800L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000L, active2, 0x204000000000L);
      case 69:
      case 101:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 15);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 117, 15);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 179, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000180080L, active2, 0x100100026029L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10040400000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000840000000000L, active2, 0x460600000000L);
      case 75:
      case 107:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 125, 15);
         break;
      case 76:
      case 108:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 15);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 126, 15);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 146, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0x600000000000L, active2, 0x2008000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000000L, active2, 0x10L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000400L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000L, active2, 0x4800002000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x200100000600a00L, active2, 0x10080140111c0L);
      case 83:
      case 115:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 15);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 122, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000000000L);
      case 84:
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0x800021L, active2, 0x800000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000000L, active2, 0x2000000000004L);
      case 88:
      case 120:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 143, 15);
         break;
      case 89:
      case 121:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200800000200000L, active2, 0x2024000400000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 67:
      case 99:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 161, 15);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 170, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x103020009L);
      case 68:
      case 100:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 15);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 15);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 172, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000100000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1400000080000L);
      case 73:
      case 105:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 178, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000220L, active2, 0x10001050L);
      case 76:
      case 108:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 157, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000L, active2, 0x890000000004L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L, active2, 0x4000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000040000000000L, active2, 0x100L);
      case 79:
      case 111:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x48000000L);
      case 82:
      case 114:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 141, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0x52000000800000L, active2, 0x10820L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x400000000L);
      case 84:
      case 116:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 15);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 15);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 15);
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 165, 15);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 173, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000020000L, active2, 0x1080000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x2020000000000000L, active1, 0L, active2, 0x800000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L, active2, 0x8000128L);
      case 67:
      case 99:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 132, 15);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 140, 15);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0x240000000000000L, active2, 0x2000000L);
      case 68:
      case 100:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 139, 15);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10000000L);
      case 69:
      case 101:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 147, 15);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 159, 15);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L, active2, 0x801000004000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 75:
      case 107:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 145, 15);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x1000000L);
      case 76:
      case 108:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 128, 15);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 171, 15);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 177, 15);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800800000000000L, active2, 0x24000000000L);
      case 77:
      case 109:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 85, 15);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x820020L, active2, 0x10000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40800000L);
      case 83:
      case 115:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 108, 15);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 176, 15);
         break;
      case 84:
      case 116:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 130, 15);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0x10040000000200L, active2, 0x100000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0x8000000000100000L, active2, 0x410000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 110, 15);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 113, 15);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80200000000000L, active2, 0x10002000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0x800L, active2, 0L);
      case 68:
      case 100:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 155, 15);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 15);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 127, 15);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 156, 15);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1840040000000200L, active2, 0x400500000040L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000000L, active2, 0x28000000000L);
      case 76:
      case 108:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 136, 15);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 166, 15);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x400000L);
      case 77:
      case 109:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 158, 15);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x800000000000L);
      case 78:
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 15);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 151, 15);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80L, active2, 0x4000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 82:
      case 114:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 81, 15);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 164, 15);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 84:
      case 116:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 121, 15);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0L, active2, 0x28L);
      case 89:
      case 121:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 116, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 73, 15);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 124, 15);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 160, 15);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 162, 15);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 174, 15);
         break;
      case 69:
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 75, 15);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 84, 15);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 154, 15);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x800000000008L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0L, active2, 0x20L);
      case 82:
      case 114:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 119, 15);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 123, 15);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000000L, active2, 0x1000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000000000L, active2, 0x8000000000L);
      case 84:
      case 116:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 144, 15);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 150, 15);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 168, 15);
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0x200000000080L, active2, 0x4000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000000L, active2, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000080L, active2, 0x1000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 68:
      case 100:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 131, 15);
         break;
      case 69:
      case 101:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 169, 15);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 153, 15);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x800000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 61, 15);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 133, 15);
         break;
      case 83:
      case 115:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 142, 15);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000000000L, active2, 0x8000000040L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000000000L, active2, 0x40L);
      case 69:
      case 101:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(10, 87, 15);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 60, 15);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000000080L, active2, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active1, 0x40000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 152, 15);
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x800000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active1, 0x40800000000080L, active2, 0L);
      case 76:
      case 108:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(11, 134, 15);
         break;
      case 78:
      case 110:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 109, 15);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa12_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 175, 15);
         break;
      case 69:
      case 101:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 106, 15);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active1, 0x40000000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active1, 0x800000000080L, active2, 0L);
      case 83:
      case 115:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 167, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 118, 15);
         break;
      case 78:
      case 110:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(13, 71, 15);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 111, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 49;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 53:
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     { jjCheckNAddStates(0, 6); }
                  }
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 181)
                        kind = 181;
                     { jjCheckNAdd(44); }
                  }
                  break;
               case 51:
               case 12:
                  { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 52:
                  if ((0xffffff7f00000000L & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  else if (curChar == 39)
                  {
                     if (kind > 189)
                        kind = 189;
                     { jjCheckNAddStates(7, 12); }
                  }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 183)
                        kind = 183;
                     { jjCheckNAdd(18); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(18); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 180)
                        kind = 180;
                     { jjCheckNAdd(15); }
                  }
                  break;
               case 49:
                  if ((0xff000000000000L & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     { jjCheckNAddStates(13, 19); }
                  }
                  if ((0xff000000000000L & l) != 0L)
                  {
                     if (kind > 181)
                        kind = 181;
                     { jjCheckNAdd(42); }
                  }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     { jjCheckNAddStates(20, 26); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 181)
                        kind = 181;
                     { jjCheckNAdd(40); }
                  }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(33, 38); }
                  else if (curChar == 36)
                     { jjCheckNAdd(27); }
                  else if (curChar == 38)
                     { jjCheckNAdd(25); }
                  else if (curChar == 37)
                     { jjCheckNAdd(23); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 181)
                        kind = 181;
                     { jjCheckNAdd(32); }
                  }
                  else if (curChar == 37)
                     { jjCheckNAdd(44); }
                  else if (curChar == 38)
                     { jjCheckNAdd(42); }
                  else if (curChar == 36)
                     { jjCheckNAdd(40); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 181)
                        kind = 181;
                     { jjCheckNAddStates(27, 29); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(30, 37); }
                  else if (curChar == 37)
                     { jjCheckNAddTwoStates(44, 23); }
                  else if (curChar == 38)
                     { jjCheckNAddTwoStates(42, 25); }
                  else if (curChar == 36)
                     { jjCheckNAddTwoStates(40, 27); }
                  else if (curChar == 35)
                     { jjCheckNAdd(29); }
                  else if (curChar == 39)
                     { jjCheckNAddTwoStates(20, 21); }
                  else if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(38, 40); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(38, 40); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(7, 9); }
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(7, 9); }
                  break;
               case 8:
                  if (curChar == 41 && kind > 7)
                     kind = 7;
                  break;
               case 9:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 180)
                     kind = 180;
                  { jjCheckNAdd(15); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 183)
                     kind = 183;
                  { jjCheckNAdd(18); }
                  break;
               case 19:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 20:
                  if ((0xffffff7f00000000L & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
                  if (curChar != 39)
                     break;
                  if (kind > 189)
                     kind = 189;
                  { jjCheckNAddStates(7, 12); }
                  break;
               case 22:
                  if (curChar == 37)
                     { jjCheckNAdd(23); }
                  break;
               case 23:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 189)
                     kind = 189;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 24:
                  if (curChar == 38)
                     { jjCheckNAdd(25); }
                  break;
               case 25:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 189)
                     kind = 189;
                  { jjCheckNAddStates(13, 19); }
                  break;
               case 26:
                  if (curChar == 36)
                     { jjCheckNAdd(27); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 189)
                     kind = 189;
                  { jjCheckNAddStates(20, 26); }
                  break;
               case 28:
                  if (curChar == 35)
                     { jjCheckNAdd(29); }
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 189)
                     kind = 189;
                  { jjCheckNAddStates(41, 47); }
                  break;
               case 30:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(48, 50); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 181)
                     kind = 181;
                  { jjCheckNAddStates(27, 29); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 181)
                     kind = 181;
                  { jjCheckNAdd(32); }
                  break;
               case 33:
                  if (curChar != 46)
                     break;
                  if (kind > 182)
                     kind = 182;
                  { jjCheckNAddTwoStates(34, 35); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 182)
                     kind = 182;
                  { jjCheckNAddTwoStates(35, 34); }
                  break;
               case 36:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(37); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 182)
                     kind = 182;
                  { jjCheckNAdd(37); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(33, 38); }
                  break;
               case 39:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(40, 27); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 181)
                     kind = 181;
                  { jjCheckNAdd(40); }
                  break;
               case 41:
                  if (curChar == 38)
                     { jjCheckNAddTwoStates(42, 25); }
                  break;
               case 42:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 181)
                     kind = 181;
                  { jjCheckNAdd(42); }
                  break;
               case 43:
                  if (curChar == 37)
                     { jjCheckNAddTwoStates(44, 23); }
                  break;
               case 44:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 181)
                     kind = 181;
                  { jjCheckNAdd(44); }
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddStates(30, 37); }
                  break;
               case 47:
                  if (curChar == 38)
                     { jjCheckNAdd(42); }
                  break;
               case 48:
                  if (curChar == 37)
                     { jjCheckNAdd(44); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 51:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(12, 13); }
                  else if (curChar == 125)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  break;
               case 52:
               case 20:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 17:
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 180)
                     kind = 180;
                  { jjCheckNAdd(15); }
                  break;
               case 50:
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 189)
                        kind = 189;
                     { jjCheckNAddStates(20, 26); }
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 181)
                        kind = 181;
                     { jjCheckNAdd(40); }
                  }
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 180)
                        kind = 180;
                     { jjCheckNAdd(15); }
                  }
                  else if (curChar == 123)
                     { jjCheckNAddTwoStates(12, 13); }
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(51, 52); }
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(38, 40); }
                  break;
               case 7:
                  { jjAddStates(53, 54); }
                  break;
               case 11:
                  if (curChar == 123)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 12:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 13:
                  if (curChar == 125 && kind > 8)
                     kind = 8;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 180)
                     kind = 180;
                  { jjCheckNAdd(15); }
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(51, 52); }
                  break;
               case 27:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 189)
                     kind = 189;
                  { jjCheckNAddStates(20, 26); }
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(55, 56); }
                  break;
               case 40:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 181)
                     kind = 181;
                  { jjCheckNAdd(40); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 51:
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(38, 40); }
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(53, 54); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 49 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\47", "\53", "\55", "\52", "\57", "\75", "\74", "\76", "\133", "\135", 
"\56", "\54", "\50", "\51", "\72", "\73", "\136", "\100", "\173", "\175", "\44", 
"\43", "\46", "\45", "\74\74", "\76\76", "\52\52", "\74\76", "\76\74", "\74\75", 
"\76\75", "\72\75", "\53\75", "\55\75", "\52\75", "\57\75", "\50\56", "\56\51", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   19, 22, 23, 24, 26, 28, 30, 19, 22, 24, 26, 28, 30, 19, 22, 24, 
   25, 26, 28, 30, 19, 22, 24, 26, 27, 28, 30, 32, 33, 38, 32, 46, 
   47, 48, 38, 22, 24, 26, 1, 2, 4, 19, 22, 24, 26, 28, 29, 30, 
   22, 24, 26, 17, 18, 7, 9, 36, 37, 
};

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 49; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffff8001L, 0xffffffffffffffffL, 0x20ffffffffffffffL, 0x0L, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[49];
    static private final int[] jjstateSet = new int[2 * 49];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
