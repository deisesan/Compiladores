/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT_LINE = 6;
  /** RegularExpression Id. */
  int COMMENT_DELIMITER = 7;
  /** RegularExpression Id. */
  int COMMENT_BRACE = 8;
  /** RegularExpression Id. */
  int LETTER = 9;
  /** RegularExpression Id. */
  int DIGIT = 10;
  /** RegularExpression Id. */
  int HEX_DIGIT = 11;
  /** RegularExpression Id. */
  int OCTAL_DIGIT = 12;
  /** RegularExpression Id. */
  int BIN_DIGIT = 13;
  /** RegularExpression Id. */
  int UNDERSCORE = 14;
  /** RegularExpression Id. */
  int EXP = 15;
  /** RegularExpression Id. */
  int SINGLE_QUOTE = 16;
  /** RegularExpression Id. */
  int PLUS = 17;
  /** RegularExpression Id. */
  int MINUS = 18;
  /** RegularExpression Id. */
  int MULTIPLY = 19;
  /** RegularExpression Id. */
  int DIVIDE = 20;
  /** RegularExpression Id. */
  int EQUAL = 21;
  /** RegularExpression Id. */
  int LESS_THAN = 22;
  /** RegularExpression Id. */
  int GREATER_THAN = 23;
  /** RegularExpression Id. */
  int LEFT_BRACKET = 24;
  /** RegularExpression Id. */
  int RIGHT_BRACKET = 25;
  /** RegularExpression Id. */
  int DOT = 26;
  /** RegularExpression Id. */
  int COMMA = 27;
  /** RegularExpression Id. */
  int LEFT_PAREN = 28;
  /** RegularExpression Id. */
  int RIGHT_PAREN = 29;
  /** RegularExpression Id. */
  int COLON = 30;
  /** RegularExpression Id. */
  int CARET = 31;
  /** RegularExpression Id. */
  int AT = 32;
  /** RegularExpression Id. */
  int LEFT_BRACE = 33;
  /** RegularExpression Id. */
  int RIGHT_BRACE = 34;
  /** RegularExpression Id. */
  int DOLLAR = 35;
  /** RegularExpression Id. */
  int HASH = 36;
  /** RegularExpression Id. */
  int AND_SYMBOL = 37;
  /** RegularExpression Id. */
  int PERCENT = 38;
  /** RegularExpression Id. */
  int DOUBLE_LESS_THAN = 39;
  /** RegularExpression Id. */
  int DOUBLE_GREATER_THAN = 40;
  /** RegularExpression Id. */
  int DOUBLE_ASTERISK = 41;
  /** RegularExpression Id. */
  int ANGLE_BRACKETS = 42;
  /** RegularExpression Id. */
  int ANGLE_BRACKETS_REVERSED = 43;
  /** RegularExpression Id. */
  int LESS_THAN_EQUAL = 44;
  /** RegularExpression Id. */
  int GREATER_THAN_EQUAL = 45;
  /** RegularExpression Id. */
  int ASSIGN = 46;
  /** RegularExpression Id. */
  int PLUS_ASSIGN = 47;
  /** RegularExpression Id. */
  int MINUS_ASSIGN = 48;
  /** RegularExpression Id. */
  int MULTIPLY_ASSIGN = 49;
  /** RegularExpression Id. */
  int DIVIDE_ASSIGN = 50;
  /** RegularExpression Id. */
  int LEFT_PAREN_DOT = 51;
  /** RegularExpression Id. */
  int DOT_RIGHT_PAREN = 52;
  /** RegularExpression Id. */
  int ABSOLUTE = 53;
  /** RegularExpression Id. */
  int AND = 54;
  /** RegularExpression Id. */
  int ARRAY = 55;
  /** RegularExpression Id. */
  int ASM = 56;
  /** RegularExpression Id. */
  int BEGIN = 57;
  /** RegularExpression Id. */
  int CASE = 58;
  /** RegularExpression Id. */
  int CONST = 59;
  /** RegularExpression Id. */
  int CONSTRUCTOR = 60;
  /** RegularExpression Id. */
  int DESTRUCTOR = 61;
  /** RegularExpression Id. */
  int DIV = 62;
  /** RegularExpression Id. */
  int DO = 63;
  /** RegularExpression Id. */
  int DOWNTO = 64;
  /** RegularExpression Id. */
  int ELSE = 65;
  /** RegularExpression Id. */
  int END = 66;
  /** RegularExpression Id. */
  int FILE = 67;
  /** RegularExpression Id. */
  int FOR = 68;
  /** RegularExpression Id. */
  int FUNCTION = 69;
  /** RegularExpression Id. */
  int IF = 70;
  /** RegularExpression Id. */
  int IMPLEMENTATION = 71;
  /** RegularExpression Id. */
  int IN = 72;
  /** RegularExpression Id. */
  int INHERITED = 73;
  /** RegularExpression Id. */
  int INLINE = 74;
  /** RegularExpression Id. */
  int INTERFACE = 75;
  /** RegularExpression Id. */
  int MOD = 76;
  /** RegularExpression Id. */
  int NIL = 77;
  /** RegularExpression Id. */
  int NOT = 78;
  /** RegularExpression Id. */
  int OBJECT = 79;
  /** RegularExpression Id. */
  int OF = 80;
  /** RegularExpression Id. */
  int OPERATOR = 81;
  /** RegularExpression Id. */
  int OR = 82;
  /** RegularExpression Id. */
  int PACKED = 83;
  /** RegularExpression Id. */
  int PROCEDURE = 84;
  /** RegularExpression Id. */
  int PROGRAM = 85;
  /** RegularExpression Id. */
  int RECORD = 86;
  /** RegularExpression Id. */
  int REINTRODUCE = 87;
  /** RegularExpression Id. */
  int REPEAT = 88;
  /** RegularExpression Id. */
  int SELF = 89;
  /** RegularExpression Id. */
  int SET = 90;
  /** RegularExpression Id. */
  int SHL = 91;
  /** RegularExpression Id. */
  int SHR = 92;
  /** RegularExpression Id. */
  int STRING = 93;
  /** RegularExpression Id. */
  int THEN = 94;
  /** RegularExpression Id. */
  int TO = 95;
  /** RegularExpression Id. */
  int TYPE = 96;
  /** RegularExpression Id. */
  int UNIT = 97;
  /** RegularExpression Id. */
  int UNTIL = 98;
  /** RegularExpression Id. */
  int USES = 99;
  /** RegularExpression Id. */
  int VAR = 100;
  /** RegularExpression Id. */
  int WHILE = 101;
  /** RegularExpression Id. */
  int WHIT = 102;
  /** RegularExpression Id. */
  int XOR = 103;
  /** RegularExpression Id. */
  int AS = 104;
  /** RegularExpression Id. */
  int CLASS = 105;
  /** RegularExpression Id. */
  int DISPINTERFACE = 106;
  /** RegularExpression Id. */
  int EXCEPT = 107;
  /** RegularExpression Id. */
  int EXPORTS = 108;
  /** RegularExpression Id. */
  int FINALIZATION = 109;
  /** RegularExpression Id. */
  int FINALLY = 110;
  /** RegularExpression Id. */
  int INITIALIZATION = 111;
  /** RegularExpression Id. */
  int IS = 112;
  /** RegularExpression Id. */
  int LIBRARY = 113;
  /** RegularExpression Id. */
  int ON = 114;
  /** RegularExpression Id. */
  int OUT = 115;
  /** RegularExpression Id. */
  int PROPERTY = 116;
  /** RegularExpression Id. */
  int RAISE = 117;
  /** RegularExpression Id. */
  int RESOURCESTRING = 118;
  /** RegularExpression Id. */
  int THREADVAR = 119;
  /** RegularExpression Id. */
  int TRY = 120;
  /** RegularExpression Id. */
  int ABSTRACT = 121;
  /** RegularExpression Id. */
  int ALIAS = 122;
  /** RegularExpression Id. */
  int ASSEMBLER = 123;
  /** RegularExpression Id. */
  int BITPACKED = 124;
  /** RegularExpression Id. */
  int BREAK = 125;
  /** RegularExpression Id. */
  int CDECL = 126;
  /** RegularExpression Id. */
  int CONTINUE = 127;
  /** RegularExpression Id. */
  int CPPDECL = 128;
  /** RegularExpression Id. */
  int CVAR = 129;
  /** RegularExpression Id. */
  int DEFAULT_TOKEN = 130;
  /** RegularExpression Id. */
  int DEPRECATED = 131;
  /** RegularExpression Id. */
  int DYNAMIC = 132;
  /** RegularExpression Id. */
  int ENUMERATOR = 133;
  /** RegularExpression Id. */
  int EXPERIMENTAL = 134;
  /** RegularExpression Id. */
  int EXPORT = 135;
  /** RegularExpression Id. */
  int EXTERNAL = 136;
  /** RegularExpression Id. */
  int FAR = 137;
  /** RegularExpression Id. */
  int FAR16 = 138;
  /** RegularExpression Id. */
  int FORWARD = 139;
  /** RegularExpression Id. */
  int GENERIC = 140;
  /** RegularExpression Id. */
  int HELPER = 141;
  /** RegularExpression Id. */
  int IMPLEMENTS = 142;
  /** RegularExpression Id. */
  int INDEX = 143;
  /** RegularExpression Id. */
  int INTERRUPT = 144;
  /** RegularExpression Id. */
  int IOCHECK = 145;
  /** RegularExpression Id. */
  int LOCAL = 146;
  /** RegularExpression Id. */
  int MESSAGE = 147;
  /** RegularExpression Id. */
  int NAME = 148;
  /** RegularExpression Id. */
  int NEAR = 149;
  /** RegularExpression Id. */
  int NODEFAULT = 150;
  /** RegularExpression Id. */
  int NORETURN = 151;
  /** RegularExpression Id. */
  int NOSTACKFRAME = 152;
  /** RegularExpression Id. */
  int OLDFPCCALL = 153;
  /** RegularExpression Id. */
  int OTHERWISE = 154;
  /** RegularExpression Id. */
  int OVERLOAD = 155;
  /** RegularExpression Id. */
  int OVERRIDE = 156;
  /** RegularExpression Id. */
  int PASCAL = 157;
  /** RegularExpression Id. */
  int PLATFORM = 158;
  /** RegularExpression Id. */
  int PRIVATE = 159;
  /** RegularExpression Id. */
  int PROTECTED = 160;
  /** RegularExpression Id. */
  int PUBLIC = 161;
  /** RegularExpression Id. */
  int PUBLISHED = 162;
  /** RegularExpression Id. */
  int READ = 163;
  /** RegularExpression Id. */
  int REGISTER = 164;
  /** RegularExpression Id. */
  int RESULT = 165;
  /** RegularExpression Id. */
  int SAFECALL = 166;
  /** RegularExpression Id. */
  int SAVEREGISTERS = 167;
  /** RegularExpression Id. */
  int SOFTFLOAT = 168;
  /** RegularExpression Id. */
  int SPECIALIZE = 169;
  /** RegularExpression Id. */
  int STATIC = 170;
  /** RegularExpression Id. */
  int STDCALL = 171;
  /** RegularExpression Id. */
  int STORED = 172;
  /** RegularExpression Id. */
  int STRICT = 173;
  /** RegularExpression Id. */
  int UNALIGNED = 174;
  /** RegularExpression Id. */
  int UNIMPLEMENTED = 175;
  /** RegularExpression Id. */
  int VARARGS = 176;
  /** RegularExpression Id. */
  int VIRTUAL = 177;
  /** RegularExpression Id. */
  int WINAPI = 178;
  /** RegularExpression Id. */
  int WRITE = 179;
  /** RegularExpression Id. */
  int IDENTIFIER = 180;
  /** RegularExpression Id. */
  int HEX_DIGIT_SEQUENCE = 181;
  /** RegularExpression Id. */
  int OCTAL_DIGIT_SEQUENCE = 182;
  /** RegularExpression Id. */
  int BIN_DIGIT_SEQUENCE = 183;
  /** RegularExpression Id. */
  int DIGIT_SEQUENCE = 184;
  /** RegularExpression Id. */
  int UNSIGNED_INTEGER = 185;
  /** RegularExpression Id. */
  int SIGNAL = 186;
  /** RegularExpression Id. */
  int UNSIGNED_REAL = 187;
  /** RegularExpression Id. */
  int SCALE_FACTOR = 188;
  /** RegularExpression Id. */
  int UNSIGNED_NUMBER = 189;
  /** RegularExpression Id. */
  int SIGNED_NUMBER = 190;
  /** RegularExpression Id. */
  int CHARACTER_STRING = 191;
  /** RegularExpression Id. */
  int QUOTED_STRING = 192;
  /** RegularExpression Id. */
  int STRING_CHARACTER = 193;
  /** RegularExpression Id. */
  int CONTROL_STRING = 194;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "<COMMENT_LINE>",
    "<COMMENT_DELIMITER>",
    "<COMMENT_BRACE>",
    "<LETTER>",
    "<DIGIT>",
    "<HEX_DIGIT>",
    "<OCTAL_DIGIT>",
    "<BIN_DIGIT>",
    "\"_\"",
    "<EXP>",
    "\"\\\'\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\"^\"",
    "\"@\"",
    "\"{\"",
    "\"}\"",
    "\"$\"",
    "\"#\"",
    "\"&\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\"**\"",
    "\"<>\"",
    "\"><\"",
    "\"<=\"",
    "\">=\"",
    "\":=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"(.\"",
    "\".)\"",
    "\"absolute\"",
    "\"and\"",
    "\"array\"",
    "\"asm\"",
    "\"begin\"",
    "\"case\"",
    "\"const\"",
    "\"constructor\"",
    "\"destructor\"",
    "\"div\"",
    "\"do\"",
    "\"downto\"",
    "\"else\"",
    "\"end\"",
    "\"file\"",
    "\"for\"",
    "\"function\"",
    "\"if\"",
    "\"implementation\"",
    "\"in\"",
    "\"inherited\"",
    "\"inline\"",
    "\"interface\"",
    "\"mod\"",
    "\"nil\"",
    "\"not\"",
    "\"object\"",
    "\"of\"",
    "\"operator\"",
    "\"or\"",
    "\"packed\"",
    "\"procedure\"",
    "\"program\"",
    "\"record\"",
    "\"reintroduce\"",
    "\"repeat\"",
    "\"self\"",
    "\"set\"",
    "\"shl\"",
    "\"shr\"",
    "\"string\"",
    "\"then\"",
    "\"to\"",
    "\"type\"",
    "\"unit\"",
    "\"until\"",
    "\"uses\"",
    "\"var\"",
    "\"while\"",
    "\"whit\"",
    "\"xor\"",
    "\"as\"",
    "\"class\"",
    "\"dispinterface\"",
    "\"except\"",
    "\"exports\"",
    "\"finalization\"",
    "\"finally\"",
    "\"initialization\"",
    "\"is\"",
    "\"library\"",
    "\"on\"",
    "\"out\"",
    "\"property\"",
    "\"raise\"",
    "\"resourcestring\"",
    "\"threadvar\"",
    "\"try\"",
    "\"abstract\"",
    "\"alias\"",
    "\"assembler\"",
    "\"bitpacked\"",
    "\"break\"",
    "\"cdecl\"",
    "\"continue\"",
    "\"cppdecl\"",
    "\"cvar\"",
    "\"default\"",
    "\"deprecated\"",
    "\"dynamic\"",
    "\"enumerator\"",
    "\"experimental\"",
    "\"export\"",
    "\"external\"",
    "\"far\"",
    "\"far16\"",
    "\"forward\"",
    "\"generic\"",
    "\"helper\"",
    "\"implements\"",
    "\"index\"",
    "\"interrupt\"",
    "\"iocheck\"",
    "\"local\"",
    "\"message\"",
    "\"name\"",
    "\"near\"",
    "\"nodefault\"",
    "\"noreturn\"",
    "\"nostackframe\"",
    "\"oldfpccall\"",
    "\"otherwise\"",
    "\"overload\"",
    "\"override\"",
    "\"pascal\"",
    "\"platform\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"published\"",
    "\"read\"",
    "\"register\"",
    "\"result\"",
    "\"safecall\"",
    "\"saveregisters\"",
    "\"softfloat\"",
    "\"specialize\"",
    "\"static\"",
    "\"stdcall\"",
    "\"stored\"",
    "\"strict\"",
    "\"unaligned\"",
    "\"unimplemented\"",
    "\"varargs\"",
    "\"virtual\"",
    "\"winapi\"",
    "\"write\"",
    "<IDENTIFIER>",
    "<HEX_DIGIT_SEQUENCE>",
    "<OCTAL_DIGIT_SEQUENCE>",
    "<BIN_DIGIT_SEQUENCE>",
    "<DIGIT_SEQUENCE>",
    "<UNSIGNED_INTEGER>",
    "<SIGNAL>",
    "<UNSIGNED_REAL>",
    "<SCALE_FACTOR>",
    "<UNSIGNED_NUMBER>",
    "<SIGNED_NUMBER>",
    "<CHARACTER_STRING>",
    "<QUOTED_STRING>",
    "<STRING_CHARACTER>",
    "<CONTROL_STRING>",
  };

}
