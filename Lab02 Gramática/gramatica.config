S -> 
constantDeclaration -> IDENTIFIER = expression hintdirectives ;
constantDeclaration -> IDENTIFIER = expression hintdirectives ; constantDeclaration
typedConstantDeclaration -> IDENTIFIER : type = typedConstant hintdirective ;
typedConstantDeclaration -> IDENTIFIER : type = typedConstant hintdirective ;
typedConstant -> constant
typedConstant -> addressConstant
typedConstant -> arrayConstant
typedConstant -> recordConstant
typedConstant -> proceduralConstant
typeDeclaration -> IDENTIFIER = type hintdirectivesOrNull ;
hintdirectivesOrNull -> 
hintdirectivesOrNull -> hintdirectives
expression 
hintdirectives
type -> simpleType
type -> stringType
type -> structuredType
type -> pointerType
type -> proceduralType
type -> genericType
type -> specializedType
type -> typealias
simpleType -> ordinalType
simpleType -> realType
stringType
structuredType
pointerType
proceduralType
genericType
specializedType
typealias
ordinalType -> Integer
ordinalType -> Shortint
ordinalType -> SmallInt
ordinalType -> Longint
ordinalType -> Longword
ordinalType -> Int64
ordinalType -> Byte
ordinalType -> Word
ordinalType -> Cardinal
ordinalType -> QWord
ordinalType -> ByteBool
ordinalType -> WordBool
ordinalType -> LongBool
ordinalType -> QWordBool
realType -> realTypeIdentifier
realTypeIdentifier
enumeratedType -> ( enumeratedTypeOption )
enumeratedTypeOption -> identifierList 
enumeratedTypeOption -> identifierList , enumeratedTypeOption
enumeratedTypeOption -> assignedEnumList
enumeratedTypeOption -> assignedEnumList , enumeratedTypeOption
identifierList

assignedEnumList -> IDENTIFIER := expression
assignedEnumList -> IDENTIFIER := expression , assignedEnumList
assignedEnumList -> IDENTIFIER = expression , assignedEnumList

subrange -> typeConstant .. constant
typeConstant
constant

stringType -> STRING unsignedIntegerOrNull
unsignedIntegerOrNull -> 
unsignedIntegerOrNull -> [ unsignedInteger ]
stringType -> TYPE STRING ( unsignedInteger )
stringType -> TYPE ANSISTRING ( unsignedInteger )

structuredType -> arrayType
structuredType -> recordType
structuredType -> objectType
structuredType -> classType
structuredType -> class referenceType
structuredType -> interfaceType
structuredType -> setType
structuredType -> fileType

arrayType -> typePackedOrNull ARRAY ordinalTypeOrNull OF type
typePackedOrNull -> 
typePackedOrNull -> PACKED
typePackedOrNull -> BITPACKED
ordinalTypeOrNull -> [ ordinalTypeList ]
ordinalTypeList -> ordinalType
ordinalTypeList -> ordinalType , ordinalTypeList

recordType -> typePackedOrNull RECORD fieldList END
fieldList -> fieldListPart commaOrNull
fieldListPart -> fixedFields
fieldListPart -> fixedFieldsOrNull variantPart
fixedFieldsOrNull ->
fixedFieldsOrNull -> fixedFields COMMA
commaOrNull -> 
commaOrNull -> COMMA

fixedFields -> identifierList : type 
fixedFields -> identifierList : type ; fixedFields

variantPart -> CASE identifierColon ordinalType variantList
identifierColon -> 
identifierColon -> IDENTIFIER :
variantList -> variant 
variantList -> variant ; variantList

variant -> constantList : ( fieldListOrNull )
constantList -> constant 
constantList -> constant , constantList
fieldListOrNull -> 
fieldListOrNull -> fieldList

setType -> SET OF ordinalType

fileType -> file ofTypeIdentifierOrNull
ofTypeIdentifierOrNull -> 
ofTypeIdentifierOrNull -> OF typeIdentifier 

pointerType -> Ë† type typeIdentifier

typeIdentifier

proceduralType -> functionHeader ofIsOrNull commaCallModifiers
proceduralType -> procedureHeader ofIsOrNull commaCallModifiers
ofIsOrNull -> 
ofIsOrNull -> OF OBJECT
ofIsOrNull -> IS NESTED
commaCallModifiers -> ; callModifiers

functionHeader -> FUNCTION formalParameterList : resultType
procedureHeader -> PROCEDURE formalParameterList
callModifiers -> REGISTER
callModifiers -> CDECL
callModifiers -> PASCAL
callModifiers -> STDCALL
callModifiers -> SAFECALL
callModifiers -> INLINE

typeAlias -> typeOrNull IDENTIFIER
typeOrNull ->
typeOrNull -> type

variableDeclaration -> identifier : type equalExpressionOrNull variableModifiersOrNull HINT_DIRECTIVE ;
equalExpressionOrNull -> 
equalExpressionOrNull -> = expression
variableModifiersOrNull -> 
variableModifiersOrNull -> variableModifiers

variableModifiersList -> variableModifiers  
variableModifiersList -> variableModifiers variableModifiersList 
variableModifiers -> ABSOLUTE integerExpressionOrIdentifier 
integerExpressionOrIdentifier -> integerExpression
integerExpressionOrIdentifier -> IDENTIFIER
variableModifiers -> ; EXPORT
variableModifiers -> ; CVAR
variableModifiers -> ; EXTERNAL stringConstantOrNull nameStringConstantOrNull
stringConstantOrNull -> 
stringConstantOrNull -> stringConstant
nameStringConstantOrNull -> 
nameStringConstantOrNull -> NAME stringConstant
variableModifiers -> HINT_DIRECTIVE

propertyDefinition -> identifier propertyInterfaceOrNull propertySpecifiers
propertyInterfaceOrNull -> 
propertyInterfaceOrNull -> propertyInterface
propertyInterface -> propertyParameterListOrNull : typeIdentifier indexIntegerconstantOrNull
propertyParameterListOrNull -> 
propertyParameterListOrNull -> propertyParameterList
propertyParameterList -> [ parameterDeclarationList ]
parameterDeclarationList -> parameterDeclaration
parameterDeclarationList -> parameterDeclaration ; parameterDeclarationList
indexIntegerconstantOrNull ->
indexIntegerconstantOrNull -> INDEX integerconstant
propertySpecifiers -> readSpecifierOrNull 
readSpecifierOrNull -> 
readSpecifierOrNull -> READ fieldOrFunction
propertySpecifiers -> writeSpecifierOrNull 
writeSpecifierOrNull ->  
writeSpecifierOrNull -> WRITE fieldOrProcedure
propertySpecifiers -> defaultSpecifierOrNull 
defaultSpecifierOrNull -> 
defaultSpecifierOrNull -> defaultSpecifier
defaultSpecifier -> DEFAULT constantOrNull
constantOrNull -> 
constantOrNull -> constant
defaultSpecifier -> NODEFAULT
fieldOrProcedure -> fieldIdentifier 
fieldOrProcedure -> procedureIdentifier 
fieldOrFunction -> fieldIdentifier
fieldOrFunction -> functionIdentifier

constant

/* pag 76 - objects */